
// MODEL
// Содержит следующие глобальные сущности: КАРТОЧКА ТОВАРА, ЗАКАЗ, описание приложения (AppState)
//КАРТОЧКА ТОВАРА
//Тип, который описывает все категории товаров, представленные в макете интернет-магазина
type CardCategoryType = "софт-скил" | "кнопка" | "другое" | "хард-скил" | "дополнительное";

//Эти данные по карточке товара мы базово получаем с сервера
interface IСardApi {
    //Данные, связанные с карточкой товара
    id: string; //идентификатор товара
    description: string; //описание товара
    image: string; //изображение товара
    title: string; //название товара
    category: CardCategoryType; //категория товара
    price: number | null; //цена товара
}

//У нас должны быть данные, связанные с корзиной по товару, т.к. товар мы можем добавить только один раз
interface ICardBasket {
    selected: boolean; //значение выбора
    // Действия, связанные с карточкой товара
    addToBasket(): void; //метод добавления в корзину
    removeFromBasket(): void; //метод удаления из корзины
    }

// Тогда в целом описание карточки по товару должно выглядеть следующим образом:
interface ICard extends IСardApi, ICardBasket {}

// Тип, который описывает все возможные варианты оплаты товаров
type PaymentType = "Онлайн" | "При получении"; 
//Заполняем две формы
interface IOrderDeliveryPaymentForm {
	payment: PaymentType; //способ оплаты
	address: string; // адрес доставки
}

interface IOrderContactsForm {
    email: string; //email пользователя
    phone: string; //телефон пользователя
}

//Полная форма (включает 2 формы)
interface IOrderCommonForm extends IOrderDeliveryPaymentForm, IOrderContactsForm {}

//Тогда итоговый интерфейс оформления заказа:
interface IOderForm extends IOrderCommonForm {
    basket: ICard[]; //перечень карточек в корзине (в postman items)
    validateOderForm(): boolean; //функция проверки корректности введенных пользователем данных
    validateEmail(): boolean; //функция проверки корректности введенных пользователем данных - email
    validatePhone(): boolean; //функция проверки корректности введенных пользователем данных - номера телефона
    validatePayment(): boolean; //функция проверки корректности выбора способа оплаты - онлайн или при получении
    validateAdress(): boolean;//функция проверки корректности введенных пользователем данных - адрес
    clearOderForm(): void; //очистка формы
    submitOder(): void; //завершение оформления
}

// В случае ошибки
type OderFormErrors = Partial<Record<keyof IOderForm, string>>;

//Интерфейс для состояния приложения
interface IAppState {
    cardList: ICard[]; //перечень карточек
    selectCard: ICard; //карточка при открытии
    order: IOderForm; //заказ
    basket: ICard[]; //перечень карточек в корзине
    totalPrice: number; //сумма заказа (в postman сумма total)
    isCardInBasket(): boolean;//метод для проверки наличия в корзине (вернуть значение, выбрана ли карточка (selected))
    getCardInBasket(): number;//метод получить количество карточек в корзине
    getCardIdInBasket(): number;//метод получить id карточек в корзине
    getTotalPrice(): number;//метод отобразить сумму заказа по всем карточкам в корзине, меняется в зависимости от доб./удаления карточек
    makeOrder(): void;//метод сдеалть заказ
    clearBasket(): void;//метод очистить данные корзины после подтверждения оформления заказа
}

// Описание одной карточкив корзине
type BasketItem = Pick<ICard, "id" | "title" | "price">

//После оформления заказа мы получаем данные с сервера для отображения на странице карточек, интерфейс
interface ICardList {
    cardList: ICard[]; //перечень карточек
}

//PRESENTER
// Содержит следующие глобальные сущности: API, EventEmmiter
//API
//Используем для:
//- получения с сервера данныех для КАРТОЧКИ ТОВАРА, списка карточек,
//- отправления данных по заказу (объект заказа)
//При описании API указываем методы "GET" (для получения данных), "PUT" (для обновления данных), "POST" (для добавления данных), "DELETE" (для удаления данных)
enum ApiMethods {
    GET = 'GET',
    PUT = 'PUT',
    POST = 'POST',
    DELETE = 'DELETE'
}
//EventEmmiter будем использовать как основу для управления событиями

//VIEW
// Содержит следующие сущности: 
// - Главная страница (отображается список карточек товаров (HTMLElement[]) и значек корзина с количеством товаров)
// - Карточка товара (категория, название, описание, цена, картинка, кнопка - определенные HTMLElement)
// - Модальное окно (контент, кнопка - определенные HTMLElement) 
// - Корзина содержит 2 сущности: отображение самой корзины (HTMLElement[], общая сумма) и отображение позиции из перечня товаров в корзине (номер по порядку, название, цена, кнопка удалить (метод удаления))
// - Формы для оформления заказа: 2 формы: способ оплаты, адрес, имя, телефон, базовая форма: кнопка отправки, отображение ошибок после проверки
// - Успешное завершение заказа, содержит общую сумму заказа




